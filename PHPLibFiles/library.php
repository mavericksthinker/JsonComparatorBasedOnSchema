<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('library')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_library.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('library.so')) return;
    } else {
      if (!dl('library.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class Validation {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_library_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_library_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	static function checkEmailValid($email) {
		return Validation_checkEmailValid($email);
	}

	static function checkPhoneValid($phone) {
		return Validation_checkPhoneValid($phone);
	}

	static function isEqualItem($arg1,$arg2,$arg3) {
		return Validation_isEqualItem($arg1,$arg2,$arg3);
	}

	static function getPath($arg1,$arg2,$arg3,$arg4,$arg5,$arg6) {
		return Validation_getPath($arg1,$arg2,$arg3,$arg4,$arg5,$arg6);
	}

	static function getPaths($arg1) {
		return Validation_getPaths($arg1);
	}

	static function findValue($arg1,$arg2) {
		return Validation_findValue($arg1,$arg2);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Validation') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Validation();
	}
}

class Aclpermission {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_library_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_library_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	static function checkPermission($json1,$json2) {
		return Aclpermission_checkPermission($json1,$json2);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_Aclpermission') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_Aclpermission();
	}
}

class calculation {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_library_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_library_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	static function calculateOrderPrice($order) {
		return calculation_calculateOrderPrice($order);
	}

	static function getData($orderJson,$data) {
		calculation_getData($orderJson,$data);
	}

	static function getItems($finalOrder,$item,$order) {
		calculation_getItems($finalOrder,$item,$order);
	}

	static function getDiscount($subTotalOfItem,$discount,$qty) {
		return calculation_getDiscount($subTotalOfItem,$discount,$qty);
	}

	static function getTaxes($amount,$taxes,$qty) {
		return calculation_getTaxes($amount,$taxes,$qty);
	}

	static function calculateTax($amount,$tax,$qty) {
		return calculation_calculateTax($amount,$tax,$qty);
	}

	static function calculationOfItems($item) {
		return calculation_calculationOfItems($item);
	}

	static function getOptionPrices($options) {
		return calculation_getOptionPrices($options);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_calculation') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_calculation();
	}
}


?>
